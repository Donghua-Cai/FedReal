syntax = "proto3";
package fednew;

// ==== 基础配置 ====
message TrainingConfig {
  int32 num_clients = 1;
  int32 total_rounds = 2;
  int32 local_epochs = 3;
  int32 batch_size = 4;
  float lr = 5;
  float momentum = 6;
  string partition_method = 7;
  float dirichlet_alpha = 8;
  int32 seed = 9;
  float sample_fraction = 10;
  string model_name = 11;      // 小模型 (client用)
  string server_model_name = 12; // 大模型 (server用)
  int32 max_message_mb = 13;

  optional int32 num_classes = 20;
  optional int32 public_examples = 21;

  // KD
  optional int32 server_kd_epochs = 30;
  optional int32 client_kd_epochs = 31;
  optional float kd_temperature = 32;
  optional float kd_alpha = 33;
  optional float epsilon = 34;  // CE/KL 平衡
}

// ==== 注册 ====
message RegisterRequest {
  string client_name = 1;
}

message RegisterReply {
  string client_id = 1;
  int32 client_index = 2;
  TrainingConfig config = 3;
}

// ==== 获取任务 ====
message GetTaskRequest {
  string client_id = 1;
}

enum Phase {
  PHASE_WAITING    = 0;
  PHASE_LOCAL_TRAIN = 1;   // client 本地训练
  PHASE_GROUP_AGG   = 2;   // server 下发组内聚合后的模型
  PHASE_GROUP_LOGITS= 3;   // 抽选client上传group logits
  PHASE_SERVER_KD   = 4;   // server KD 阶段（大模型训练）
  PHASE_CLIENT_KD   = 5;   // client KD 阶段
  PHASE_DONE        = 10;
}

message TaskReply {
  int32 round = 1;
  Phase phase = 2;
  bool participate = 3;

  // 小模型（组内聚合后下发）
  bytes group_model = 4;

  // server 蒸馏得到的 logits (row-major float32 [N,C])
  bytes server_logits = 5;

  TrainingConfig config = 10;
}

// ==== 上传小模型更新 ====
message UploadRequest {
  string client_id = 1;
  int32 round = 2;
  int32 group_id = 3;

  bytes local_model = 4;
  int64 num_samples = 5;

  double train_loss = 6;
  double train_acc = 7;
  double test_loss = 8;
  double test_acc = 9;
}

message UploadReply {
  bool accepted = 1;
  int32 round = 2;
}

// ==== 上传 group logits ====
message GroupLogits {
  string client_id = 1;
  int32 group_id = 2;
  int32 round = 3;

  // row-major float32 [N,C]
  bytes logits = 10;
  int32 num_classes = 11;
  int32 total_examples = 12;
}

// ==== 服务 ====
service FederatedService {
  rpc RegisterClient(RegisterRequest) returns (RegisterReply);
  rpc GetTask(GetTaskRequest) returns (TaskReply);
  rpc UploadUpdate(UploadRequest) returns (UploadReply);
  rpc UploadGroupLogits(GroupLogits) returns (UploadReply);
}