# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import fed_pb2 as fed__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in fed_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class FederatedServiceStub(object):
    """==== 服务 ====
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterClient = channel.unary_unary(
                '/fednew.FederatedService/RegisterClient',
                request_serializer=fed__pb2.RegisterRequest.SerializeToString,
                response_deserializer=fed__pb2.RegisterReply.FromString,
                _registered_method=True)
        self.GetTask = channel.unary_unary(
                '/fednew.FederatedService/GetTask',
                request_serializer=fed__pb2.GetTaskRequest.SerializeToString,
                response_deserializer=fed__pb2.TaskReply.FromString,
                _registered_method=True)
        self.UploadUpdate = channel.unary_unary(
                '/fednew.FederatedService/UploadUpdate',
                request_serializer=fed__pb2.UploadRequest.SerializeToString,
                response_deserializer=fed__pb2.UploadReply.FromString,
                _registered_method=True)
        self.UploadGroupLogits = channel.unary_unary(
                '/fednew.FederatedService/UploadGroupLogits',
                request_serializer=fed__pb2.GroupLogits.SerializeToString,
                response_deserializer=fed__pb2.UploadReply.FromString,
                _registered_method=True)


class FederatedServiceServicer(object):
    """==== 服务 ====
    """

    def RegisterClient(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadGroupLogits(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FederatedServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterClient': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterClient,
                    request_deserializer=fed__pb2.RegisterRequest.FromString,
                    response_serializer=fed__pb2.RegisterReply.SerializeToString,
            ),
            'GetTask': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTask,
                    request_deserializer=fed__pb2.GetTaskRequest.FromString,
                    response_serializer=fed__pb2.TaskReply.SerializeToString,
            ),
            'UploadUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadUpdate,
                    request_deserializer=fed__pb2.UploadRequest.FromString,
                    response_serializer=fed__pb2.UploadReply.SerializeToString,
            ),
            'UploadGroupLogits': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadGroupLogits,
                    request_deserializer=fed__pb2.GroupLogits.FromString,
                    response_serializer=fed__pb2.UploadReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fednew.FederatedService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('fednew.FederatedService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class FederatedService(object):
    """==== 服务 ====
    """

    @staticmethod
    def RegisterClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fednew.FederatedService/RegisterClient',
            fed__pb2.RegisterRequest.SerializeToString,
            fed__pb2.RegisterReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fednew.FederatedService/GetTask',
            fed__pb2.GetTaskRequest.SerializeToString,
            fed__pb2.TaskReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UploadUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fednew.FederatedService/UploadUpdate',
            fed__pb2.UploadRequest.SerializeToString,
            fed__pb2.UploadReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UploadGroupLogits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fednew.FederatedService/UploadGroupLogits',
            fed__pb2.GroupLogits.SerializeToString,
            fed__pb2.UploadReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
